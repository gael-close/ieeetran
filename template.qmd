---
title: A Sample Article for IEEE Transactions
format:
  ieeetran-pdf:
    keep-tex: true
    
author:
  - name: First Author
    orcid: 0000-0000-0000-0000
    email: first@example.org
    note: 1  # workaround i/o linked affiliation
  - name: Second Author
    orcid: 0000-0000-0000-0000
    email: second@example.org
    note: 1
  - name: Third Author
    email: third@example.org
    note: 2
date: 01-Jan-2022.
affiliations:
  - id: 1
    name: Stanford University
    city: Stanford
    country: USA
  - id: 2
    name: Some corporation
    city: New York
    country: USA

abstract: |
  This document is a sample illustrating the Quarto `ieeetran` template.
  It includes the key elements of a scientific articles 
  (references, equations, figures, tables, code, cross references).
  The template enables the generation of IEEE-formatted article from a Jupypter notebook.
keywords: [template, demo]
reference-section-title: References
bibliography: bibliography.bib
note: Extra footnote.
filters:
   - latex-environment
environments: [mytable, mywidetable]
---

# Introduction {#sec-intro}

[Quarto](https://quarto.org/) is recent tool enabling the generation of polished HTML page or PDF article from Jupyter notebook [@Close2022-dt].
It can generate, with one command and minimal configuration, 
PDF formatted according to journal template via extensions---see the [list of journals supported](https://github.com/quarto-journals/).
This sample article illustrates the formating achieved with the `ieeetran` extension.
This extension invokes the [official release of Latex IEEEtran style](https://www.ctan.org/tex-archive/macros/latex/contrib/IEEEtran/).
Before submitting to a IEEE journal, consult [@Ieee2020-zv] for editorial guidelines and the journal or conference instructions.

\muted{\lipsum[1-2]}

# Executable code

Quarto can not only format, but also execute on the fly Python code.
It enables *"executable articles"* [@Lasser2020-wo].
@fig-polar illustrates this feature.
The code, included in the article, generates the figure on the fly when rendering the article.
Note that the code can be easily hidden, or folded (this only works in the HTML output though, the PDF being static).

```{python}
#| label: fig-polar
#| fig-cap: "A line plot on a polar axis."

import numpy as np
import matplotlib.pyplot as plt

r = np.arange(0, 2, 0.01)
theta = 2 * np.pi * r
fig, ax = plt.subplots(
  subplot_kw = {'projection': 'polar'} 
)
ax.plot(theta, r)
ax.set_rticks([0.5, 1, 1.5, 2])
ax.grid(True)
plt.show()
```

![A wide figure spanning the two columns](fig-wide.png){#fig-wide fig-env="figure*"}

# Other features {#sec-feature}

Wide figure are supported, as demonstrated by @fig-wide, by appending `fig-env="figure*"` to the figure statement.

\muted{\lipsum[1]}

## Equation

@eq-maxwell shows a block of equations.

$$
 \begin{aligned}\nabla \times \vec{\mathbf{B}} -\, \frac1c\, \frac{\partial\vec{\mathbf{E}}}{\partial t} & = \frac{4\pi}{c}\vec{\mathbf{j}} \\   \nabla \cdot \vec{\mathbf{E}} & = 4 \pi \rho 
 \end{aligned} 
$$ {#eq-maxwell}


## Tables

::: {.mytable options="!t"}
|       Parameter       |      Symbol      | Min | Typ | Max | Unit |
| --------------------- | ---------------- | --- | --- | --- | ---- |
| Supply current        | $i_\mathrm{off}$ | -   | -   | 10  | mA   |
| Hall sensitivity      | $S_\mathrm{H}$   | 0.2 | -   | -   | V/T  |
| Effective nr. of bits | $\mathrm{ENOB}$  | 12  | -   | -   | -    |

: Table of sensor parameters {#tbl-parameters}
:::


Tables are problematic due to 2-column nature of the IEEE class, but an easy workaround exist. @tbl-parameters illustrates a simple table.
Such table should be wrapped with a custom environment `mytable` (or `mywidecolumn` for wide table spanning the 2 columns) via the [extension latex-environment](https://github.com/quarto-ext/latex-environment).

```{python}
#| echo: false

from IPython.display import Latex
import pandas as pd
cidx = pd.MultiIndex.from_arrays([
    ["Equity", "Equity", "Equity", "Equity",
     "Stats", "Stats", "Stats", "Stats", "Rating"],
    ["Energy", "Energy", "Consumer", "Consumer", "", "", "", "", ""],
    ["BP", "Shell", "H&M", "Unilever",
     "Std Dev", "Variance", "52w High", "52w Low", ""]
])
iidx = pd.MultiIndex.from_arrays([
    ["Equity", "Equity", "Equity", "Equity"],
    ["Energy", "Energy", "Consumer", "Consumer"],
    ["BP", "Shell", "H&M", "Unilever"]
])
styler = pd.DataFrame([
    [1, 0.8, 0.66, 0.72, 32.1678, 32.1678**2, 335.12, 240.89, "Buy"],
    [0.8, 1.0, 0.69, 0.79, 1.876, 1.876**2, 14.12, 19.78, "Hold"],
    [0.66, 0.69, 1.0, 0.86, 7, 7**2, 210.9, 140.6, "Buy"],
    [0.72, 0.79, 0.86, 1.0, 213.76, 213.76**2, 2807, 3678, "Sell"],
], columns=cidx, index=iidx).style

styler.format(subset="Equity", precision=2)\
      .format(subset="Stats", precision=1, thousands=",")\
      .format(subset="Rating", formatter=str.upper)\
      .format_index(escape="latex", axis=1)\
      .format_index(escape="latex", axis=0)\
      .hide(level=0, axis=0)  
def rating_color(v):
    if v == "Buy": color = "#006400"
    elif v == "Sell": color = "red"
    else: color = "gray"
    return f"color: {color}; font-weight: bold;"
styler.background_gradient(cmap="inferno", subset="Equity", vmin=0, vmax=1)\
      .applymap(rating_color, subset="Rating")  
styler.applymap_index(
    lambda v: "rotatebox:{45}--rwrap--latex;", level=2, axis=1
) 

Latex(styler.to_latex(
    caption="Selected stock correlation and simple statistics",
    label="tbl-styled",
    clines="skip-last;data",
    convert_css=True,
    multicol_align="|c|",
    hrules=True,
    environment='table*',
    position_float='centering',
    position='!b',

)) 
```

Data-rich tables can also be generated **programmatically** from Python code, and rendered on the fly.
As an example, we execute here the example code from [the Pandas documentation](https://pandas.pydata.org/docs/reference/api/pandas.io.formats.style.Styler.to_latex.html#pandas.io.formats.style.Styler.to_latex) for a complicated styled table.
The result is rendered in TableÂ \ref{tbl-styled}.
Clearly, generating such table in plain Latex would be **painful**.
And the Latex code would have to be tweaked with each data update.
<!-- Cannot use @tbl-styled here as this label is defined in latex -->

## Conclusion

We have showed how the extension handles all key elements of scholarly writing.
With one line of code, a Jupyter notebook (or it text equivalent) can be formatted into a IEEE article, almost ready for submission.
During the drafting, the HTML output should be preferred (use option `--to ieeetran-html` to render to HTML).
It is quicker, and figure/table placement is trivial.
In addition, the HTML format, with its dynamic features, opens up advanced features, like interactive plots to engage with the readers [@Close2022-dt].